<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.scd.dcs.mappers.UserMapper">
    <insert id="insertEmailAuth" parameterType="EmailAuthEntity">
        INSERT INTO `dcs`.`email_auths` (`email`, `code`, `salt`, `created_at`, `expires_at`, `is_expired`, `is_verified`, `is_used`)
        VALUES (#{email}, #{code}, #{salt}, #{createdAt}, #{expiresAt}, #{isExpired}, #{isVerified}, #{isUsed})
    </insert>

    <insert id="insertUser" parameterType="UserEntity">
        INSERT INTO `dcs`.`user`(`email`, `password`, `name`, `nickname`, `tel`, `address`, `role`, `is_state`, `is_insurance`)
        VALUES (#{email},  #{password}, #{name}, #{nickname}, #{tel}, #{address}, #{role}, #{isState}, #{isInsurance})
    </insert>

    <select id="selectUsers" resultType="UserEntity">
        SELECT `email`        AS `email`,
               `password`     AS `password`,
               `name`         AS `name`,
               `nickname`     AS `nickname`,
               `tel`          AS `tel`,
               `address`      AS `address`,
               `role`         AS `role`,
               `is_state`     AS `isState`,
               `is_insurance` AS `isInsurance`
        FROM `dcs`.`user`
        WHERE BINARY `user`.`role` = 'USER'
    </select>

    <select id="selectUserByEmail" resultType="UserEntity">
        SELECT `email`        AS `email`,
               `name`         AS `name`,
               `nickname`     AS `nickname`,
               `password`     AS `password`,
               `tel`          AS `tel`,
               `address`      AS `address`,
               `role`         AS `role`,
               `is_state`     AS `isState`,
               `is_insurance` AS `isInsurance`
        FROM `dcs`.`user`
        WHERE BINARY `email` = #{email}
        LIMIT 1
    </select>

    <select id="selectUserByName" resultType="UserEntity">
        SELECT `email`        AS `email`,
               `name`         AS `name`,
               `nickname`     AS `nickname`,
               `password`     AS `password`,
               `tel`          AS `tel`,
               `address`      AS `address`,
               `role`         AS `role`,
               `is_state`     AS `isState`,
               `is_insurance` AS `isInsurance`
        FROM `dcs`.`user`
        WHERE BINARY `name` = #{name}
        LIMIT 1
    </select>

    <select id="selectUserByNickname" resultType="UserEntity">
        SELECT `email`        AS `email`,
               `name`         AS `name`,
               `nickname`     AS `nickname`,
               `password`     AS `password`,
               `tel`          AS `tel`,
               `address`      AS `address`,
               `role`         AS `role`,
               `is_state`     AS `isState`,
               `is_insurance` AS `isInsurance`
        FROM `dcs`.`user`
        WHERE BINARY `nickname` = #{nickname}
        LIMIT 1
    </select>

    <select id="selectUserByTel" resultType="UserEntity">
        SELECT `email`        AS `email`,
               `name`         AS `name`,
               `nickname`     AS `nickname`,
               `password`     AS `password`,
               `tel`          AS `tel`,
               `address`      AS `address`,
               `role`         AS `role`,
               `is_state`     AS `isState`,
               `is_insurance` AS `isInsurance`
        FROM `dcs`.`user`
        WHERE BINARY `tel` = #{tel}
        LIMIT 1
    </select>

    <select id="selectEmailAuthByEmailCodeSalt" resultType="EmailAuthEntity">
        SELECT `email`       AS `email`,
               `code`        AS `code`,
               `salt`        AS `salt`,
               `created_at`  AS `createdAt`,
               `expires_at`  AS `expiresAt`,
               `is_expired`  AS `isExpired`,
               `is_verified` AS `isVerified`,
               `is_used`     AS `isUsed`
        FROM `dcs`.`email_auths`
        WHERE BINARY `email` = #{email}
          AND BINARY `code` = #{code}
          AND BINARY `salt` = #{salt}
        LIMIT 1
    </select>
    
    <select id="selectUserPayment" resultType="UserPaymentVo">
        SELECT `email`                                               AS `email`,
               `password`                                            AS `password`,
               `name`                                                AS `name`,
               `nickname`                                            AS `nickname`,
               `tel`                                                 AS `tel`,
               `address`                                             AS `address`,
               `role`                                                AS `role`,
               `is_state`                                            AS `isState`,
               `is_insurance`                                        AS `isInsurance`,
               `work_type`                                           AS `workType`,
               COUNT(1)                                              AS `workDays`,
               (COUNT(1) * `p`.`price`)                              AS `payment`,
               (SELECT COUNT(*)
                FROM `dcs`.`submit_images` AS `images`
                         LEFT JOIN `dcs`.`work` AS `work` on `work`.`index` = `images`.`work_index`
                WHERE `user_email` = #{email}
                  AND DATE_FORMAT(`work`.`date`, '%Y-%m') = #{date}) AS `workCount`
        FROM `dcs`.`user`
                 LEFT JOIN `dcs`.`work` w ON `user`.email = w.user_email
                 LEFT JOIN dcs.payment p on `user`.work_type = p.uwork_type
        WHERE BINARY DATE_FORMAT(`w`.`date`, '%Y-%m') = #{date}
          AND BINARY `email` = #{email}
          AND BINARY `user`.`role` = 'USER'
    </select>

    <update id="updateEmailAuth" parameterType="EmailAuthEntity">
        UPDATE `dcs`.`email_auths`
        SET `created_at`  = #{createdAt},
            `expires_at`  = #{expiresAt},
            `is_expired`  = #{isExpired},
            `is_verified` = #{isVerified},
            `is_used`     = #{isUsed}
        WHERE BINARY `email` = #{email}
          AND BINARY `code` = #{code}
          AND BINARY `salt` = #{salt}
        LIMIT 1
    </update>

    <update id="updateUser" parameterType="UserEntity">
        UPDATE `dcs`.`user`
        SET `password`     = #{password},
            `name`         = #{name},
            `nickname`     = #{nickname},
            `tel`          = #{tel},
            `address`      = #{address},
            `role`         = #{role},
            `is_state`     = #{isState},
            `is_insurance` = #{isInsurance}
        WHERE BINARY `email` = #{email}
        LIMIT 1
    </update>


</mapper>